# influence on the dependent variable regardless of whether this factor can be observed
# or not. In the fixed effects method, the goal is to overcome the time-invariant
# influences on the dependent variable.
# We can solve the endogeneity problem, which arises from the time-invariant unobserved
# effects with dummy variables. In our case we could use the different countries as
# dummy variables, the different years as dummy variables or both together as dummy
# variables.
#All approaches might lead to a good regression model, but in this case I choose
# only countries as dummy variables.
# I suppose the difference in happiness is explained more by what country you live
# in than by what year you live in (since we are only looking at a short period of time).
# I believe that happiness is more influenced by whether a person lives in Switzerland
# or Haiti, rather than whether they live in Switzerland in 2015 or 2016.
#That is why I use countries as dummy variables, which have to be factors.
reg_ex_7 <- lm(Happiness.Score ~ `Inflation, consumer prices (annual %)` + as.factor(Country),
data = happy_inflation)
summary(reg_ex_7)
# (I have not used the feols function because for some reason it displayed the
# summary in a strange format)
# In our fixed_effects model, we can see that inflation has no longer a statistically
# significant effect on the happiness score of a country, but most of the country
# dummy variables have a significant effect on the happiness of their citizen.
# Our new model can explain 96% percent of the variation in the happiness score,
# this is a much better value compared to our initial regression in exercise 6.
# 8. ###########################################################################
log(min(happy_inflation$`Inflation, consumer prices (annual %)`) + 0.01)
log(happy_inflation$`Inflation, consumer prices (annual %)`)
log_inflation <- happy_inflation$`Inflation, consumer prices (annual %)` / 100
log_inflation
log_inflation <- log_inflation + 0.01
log_inflation
log_inflation <- log(log_inflation)
log_inflation
happy_inflation$log_inflation <- log_inflation
View(happy_inflation)
View(happy_inflation)
# 1. ###########################################################################
# Load all important packages:
library(tidyverse)
library(dplyr)
library(stats)
library(fixest)
library(ggplot2)
library(gridExtra)
# Set up the working directory in the RStudio interface:
getwd()
# import the data sets:
happy_2015 <- read.csv("happy_2015.csv", na = c("NA", ""))
happy_2016 <- read.csv("happy_2016.csv", na = c("NA", ""))
happy_2017 <- read.csv("happy_2017.csv", na = c("NA", ""))
happy_2018 <- read.csv("happy_2018.csv", na = c("NA", ""))
happy_2019 <- read.csv("happy_2019.csv", na = c("NA", ""))
# fix problems with incompatible column names:
# 1.) Every column with countries gets named "Country"
names(happy_2018)[names(happy_2018) == "Country.or.region"] <- "Country"
names(happy_2019)[names(happy_2019) == "Country.or.region"] <- "Country"
# 2.) Give every country its region:
# This is not necessary but it might be interesting to group the countries by
# region.
region_data <- data.frame(happy_2015$Country, happy_2015$Region)
names(region_data)[names(region_data) == "happy_2015.Country"] <- "Country"
names(region_data)[names(region_data) == "happy_2015.Region"] <- "Region"
happy_2017 <- left_join(happy_2017, region_data, by = "Country")
happy_2018 <- left_join(happy_2018, region_data, by = "Country")
happy_2019 <- left_join(happy_2019, region_data, by = "Country")
# 3.) Every column with the happiness rank gets named "Happiness.Rank":
names(happy_2018)[names(happy_2018) == "Overall.rank"] <- "Happiness.Rank"
names(happy_2019)[names(happy_2019) == "Overall.rank"] <- "Happiness.Rank"
# 4.) Every column with the happiness score gets named "Happiness.Score":
names(happy_2018)[names(happy_2018) == "Score"] <- "Happiness.Score"
names(happy_2019)[names(happy_2019) == "Score"] <- "Happiness.Score"
# 5.) We add a year column to every data set for a future merge:
happy_2015["Year"] <- "2015"
happy_2016["Year"] <- "2016"
happy_2017["Year"] <- "2017"
happy_2018["Year"] <- "2018"
happy_2019["Year"] <- "2019"
# 6.) To get a better overview of the data we delete all columns that we do not
# need for the future tasks of the assignment:
happy_2015 <- subset(happy_2015, select = -c(Standard.Error, Economy..GDP.per.Capita.,
Family, Health..Life.Expectancy.,
Freedom, Trust..Government.Corruption.,
Generosity, Dystopia.Residual))
happy_2016 <- subset(happy_2016, select = -c(Lower.Confidence.Interval, Upper.Confidence.Interval,
Economy..GDP.per.Capita., Family,
Health..Life.Expectancy., Freedom,
Trust..Government.Corruption., Generosity,
Dystopia.Residual))
happy_2017 <- subset(happy_2017, select = -c(Whisker.high, Whisker.low, Economy..GDP.per.Capita.,
Family, Health..Life.Expectancy., Freedom,
Generosity, Trust..Government.Corruption.,
Dystopia.Residual))
happy_2018 <- subset(happy_2018, select = -c(GDP.per.capita, Social.support, Healthy.life.expectancy,
Freedom.to.make.life.choices, Generosity,
Perceptions.of.corruption))
happy_2019 <- subset(happy_2019, select = -c(GDP.per.capita, Social.support, Healthy.life.expectancy,
Freedom.to.make.life.choices, Generosity,
Perceptions.of.corruption))
# 7.) Finally we reorder the columns of our five data sets:
happy_2015 <- happy_2015[, c(5, 1, 2, 3, 4)]
happy_2016 <- happy_2016[, c(5, 1, 2, 3, 4)]
happy_2017 <- happy_2017[, c(5, 1, 4, 2, 3)]
happy_2018 <- happy_2018[, c(5, 2, 4, 1, 3)]
happy_2019 <- happy_2019[, c(5, 2, 4, 1, 3)]
# 8.) At the end we merge the five data sets to one set called "happy":
happy <- rbind(happy_2015, happy_2016, happy_2017, happy_2018, happy_2019)
head(happy)
# 2. ###########################################################################
# I have downloaded the most current version of the inflation data from the
# website of the World Bank.
# 3. ###########################################################################
inflation <- read.csv("C:/Users/gross/OneDrive/Dokumente/API_FP.CPI.TOTL.ZG_DS2_en_csv_v2_4701153/API_FP.CPI.TOTL.ZG_DS2_en_csv_v2_4701153.csv",
na = c("NA", ""), skip = 4, header = TRUE)
# Delete columns that we do not need to make the data clearer:
inflation[,5:59] <- NULL
inflation[,10:12] <- NULL
# Rename the year columns so they later match with our variable "year" in "happy":
names(inflation)[names(inflation) == "X2015"] <- "2015"
names(inflation)[names(inflation) == "X2016"] <- "2016"
names(inflation)[names(inflation) == "X2017"] <- "2017"
names(inflation)[names(inflation) == "X2018"] <- "2018"
names(inflation)[names(inflation) == "X2019"] <- "2019"
# Again we can delete some columns that the do not need for the later exercises:
inflation[, 2:4] <- NULL
# Transform the data into tidy format with the long format:
# I drop the NA-values because they will bring no benefits for the upcoming
# estimations.
inflation_tidy <- inflation %>% pivot_longer("2015":"2019", names_to = "Year",
values_to = "Inflation, consumer prices (annual %)",
values_drop_na = TRUE)
# Rename the column "Country.Name" into "Country" to make the merge smoother:
names(inflation_tidy)[names(inflation_tidy) == "Country.Name"] <- "Country"
# 4. ###########################################################################
happy_inflation <- inner_join(happy, inflation_tidy, by = c("Country" = "Country",
"Year" = "Year"))
# 5. ###########################################################################
# First we check how many unique countries are contained in each of the two data
# sets "happy" and "inflation_tidy"
length(unique(happy$Country))
length(unique(inflation_tidy$Country))
# We can see that the data set "inflation_tidy" contains more unique countries.
# We can not expect that the inner_join of these two has more than
# 170 countries since "happy" only contains 170 unique countries.
# When we look at the which unique countries are contained in both data sets,
# then we can see how many unique countries should end up in the inner merge
# of these two data sets.
sum(unique(happy$Country) %in% unique(inflation_tidy$Country))
# We have 134 matches from the happy data with the inflation_tidy data.
# This number should be similar with the number of unique countries in our
# merged data "happy_inflation".
length(unique(happy_inflation$Country))
# This is the case!
# 98 countries have been dropped due to the merging process.
# 6. ###########################################################################
# We estimate a simple linear model, in our case inflation rate is the regression
# variable and happiness is the variable that we want to estimate.
reg_ex_6 <- lm(Happiness.Score ~ `Inflation, consumer prices (annual %)`,
data = happy_inflation)
summary(reg_ex_6)
# We see in the regression that inflation has a significant influence on the
# happiness of people.
# You can see the significance of this effect at the t-value, its sum is bigger
# than the typical threshold of |1.96|. This means that inflation has a statistical
# significant effect on happiness.
# When the inflation rate increases by one unit (here in percent point), then you
# can see a decrease in happiness by 0.0108 units. This is just a small effect,
# but the effect is still statistically significant.
# The effect of inflation on happiness is statistically significant but inflation
# has only a small effect on the happiness of the people, this explains why the
# R^2 is so small. Only 3.4% percent of the variation in happiness can be explained
# by inflation.
# This is a sign that there are other factors, which are not in the model which
# determine the happiness of the people.
happy_inflation_2019 <- select(filter(happy_inflation, Year == 2019),
c(Year, Country, `Inflation, consumer prices (annual %)`,
Happiness.Score))
# When we only look at the data from 2019 we can see that certain countries fulfill
# the economic explanation that a lower inflation leads to a higher happiness score.
# The countries Denmark and Botswana are prime examples for this, Denmark has a
# low inflation rate and is one of the happiest countries in the world, while
# Botswana has a high inflation rate and one of the lowest happiness score of all
# countries.
happy_inflation_2019[2, ]
happy_inflation_2019[120, ]
# When you remember that our regression model explains only 3.4% percent of the
# variation in happiness, you can easily find examples where one country has a
# higher inflation rate and a higher happiness score.
happy_inflation_2019[31, ]
happy_inflation_2019[126, ]
# Uruguay has a much higher inflation than South Sudan but it still has also a much
# higher happiness score. This leads to the conclusion that there are other economic
# factors that significantly influence the happiness of people in a country.
# Higher inflation has a decreasing effect for the happiness of the citizen of a
# country, but it is only one small factor which determines the happiness.
# 7. ###########################################################################
# We have seen that our regression model from exercise six only explains a small
# fraction of our model.
# One reason why this might be the case lies in the fact that we our data sets is
# a panel data set, which contains different countries over different time periods
# With a fixed effects model it is possible to prevent the bias of the estimated
# parameters of the regression model. For this purpose, it is useful to realize
# that variables can be divided into two groups. On the one hand, there are variables
# that change over time and variables that remain constant over time, hereafter
# referred to as time-invariant variables. These time-invariant variables have an
# influence on the dependent variable regardless of whether this factor can be observed
# or not. In the fixed effects method, the goal is to overcome the time-invariant
# influences on the dependent variable.
# We can solve the endogeneity problem, which arises from the time-invariant unobserved
# effects with dummy variables. In our case we could use the different countries as
# dummy variables, the different years as dummy variables or both together as dummy
# variables.
#All approaches might lead to a good regression model, but in this case I choose
# only countries as dummy variables.
# I suppose the difference in happiness is explained more by what country you live
# in than by what year you live in (since we are only looking at a short period of time).
# I believe that happiness is more influenced by whether a person lives in Switzerland
# or Haiti, rather than whether they live in Switzerland in 2015 or 2016.
#That is why I use countries as dummy variables, which have to be factors.
reg_ex_7 <- lm(Happiness.Score ~ `Inflation, consumer prices (annual %)` + as.factor(Country),
data = happy_inflation)
summary(reg_ex_7)
# (I have not used the feols function because for some reason it displayed the
# summary in a strange format)
# In our fixed_effects model, we can see that inflation has no longer a statistically
# significant effect on the happiness score of a country, but most of the country
# dummy variables have a significant effect on the happiness of their citizen.
# Our new model can explain 96% percent of the variation in the happiness score,
# this is a much better value compared to our initial regression in exercise 6.
# 8. ###########################################################################
# I add a new column to the happy_inflation data log(Inflation + 0.01), for this
# I divide the Inflation data by 100 to get away from percent values, then I will
# add 0.01 and at the end I will take the log().
# Since some inflation values are still negative we will lose some observation,
# since you can not take the log() of a negative value.
# Create the new column log_inflation
log_inflation <- happy_inflation$`Inflation, consumer prices (annual %)` / 100
log_inflation <- log_inflation + 0.01
log_inflation
# 1. ###########################################################################
# Load all important packages:
library(tidyverse)
library(dplyr)
library(stats)
library(fixest)
library(ggplot2)
library(gridExtra)
# Set up the working directory in the RStudio interface:
getwd()
# import the data sets:
happy_2015 <- read.csv("happy_2015.csv", na = c("NA", ""))
happy_2016 <- read.csv("happy_2016.csv", na = c("NA", ""))
happy_2017 <- read.csv("happy_2017.csv", na = c("NA", ""))
happy_2018 <- read.csv("happy_2018.csv", na = c("NA", ""))
happy_2019 <- read.csv("happy_2019.csv", na = c("NA", ""))
# fix problems with incompatible column names:
# 1.) Every column with countries gets named "Country"
names(happy_2018)[names(happy_2018) == "Country.or.region"] <- "Country"
names(happy_2019)[names(happy_2019) == "Country.or.region"] <- "Country"
# 2.) Give every country its region:
# This is not necessary but it might be interesting to group the countries by
# region.
region_data <- data.frame(happy_2015$Country, happy_2015$Region)
names(region_data)[names(region_data) == "happy_2015.Country"] <- "Country"
names(region_data)[names(region_data) == "happy_2015.Region"] <- "Region"
happy_2017 <- left_join(happy_2017, region_data, by = "Country")
happy_2018 <- left_join(happy_2018, region_data, by = "Country")
happy_2019 <- left_join(happy_2019, region_data, by = "Country")
# 3.) Every column with the happiness rank gets named "Happiness.Rank":
names(happy_2018)[names(happy_2018) == "Overall.rank"] <- "Happiness.Rank"
names(happy_2019)[names(happy_2019) == "Overall.rank"] <- "Happiness.Rank"
# 4.) Every column with the happiness score gets named "Happiness.Score":
names(happy_2018)[names(happy_2018) == "Score"] <- "Happiness.Score"
names(happy_2019)[names(happy_2019) == "Score"] <- "Happiness.Score"
# 5.) We add a year column to every data set for a future merge:
happy_2015["Year"] <- "2015"
happy_2016["Year"] <- "2016"
happy_2017["Year"] <- "2017"
happy_2018["Year"] <- "2018"
happy_2019["Year"] <- "2019"
# 6.) To get a better overview of the data we delete all columns that we do not
# need for the future tasks of the assignment:
happy_2015 <- subset(happy_2015, select = -c(Standard.Error, Economy..GDP.per.Capita.,
Family, Health..Life.Expectancy.,
Freedom, Trust..Government.Corruption.,
Generosity, Dystopia.Residual))
happy_2016 <- subset(happy_2016, select = -c(Lower.Confidence.Interval, Upper.Confidence.Interval,
Economy..GDP.per.Capita., Family,
Health..Life.Expectancy., Freedom,
Trust..Government.Corruption., Generosity,
Dystopia.Residual))
happy_2017 <- subset(happy_2017, select = -c(Whisker.high, Whisker.low, Economy..GDP.per.Capita.,
Family, Health..Life.Expectancy., Freedom,
Generosity, Trust..Government.Corruption.,
Dystopia.Residual))
happy_2018 <- subset(happy_2018, select = -c(GDP.per.capita, Social.support, Healthy.life.expectancy,
Freedom.to.make.life.choices, Generosity,
Perceptions.of.corruption))
happy_2019 <- subset(happy_2019, select = -c(GDP.per.capita, Social.support, Healthy.life.expectancy,
Freedom.to.make.life.choices, Generosity,
Perceptions.of.corruption))
# 7.) Finally we reorder the columns of our five data sets:
happy_2015 <- happy_2015[, c(5, 1, 2, 3, 4)]
happy_2016 <- happy_2016[, c(5, 1, 2, 3, 4)]
happy_2017 <- happy_2017[, c(5, 1, 4, 2, 3)]
happy_2018 <- happy_2018[, c(5, 2, 4, 1, 3)]
happy_2019 <- happy_2019[, c(5, 2, 4, 1, 3)]
# 8.) At the end we merge the five data sets to one set called "happy":
happy <- rbind(happy_2015, happy_2016, happy_2017, happy_2018, happy_2019)
head(happy)
# 2. ###########################################################################
# I have downloaded the most current version of the inflation data from the
# website of the World Bank.
# 3. ###########################################################################
inflation <- read.csv("C:/Users/gross/OneDrive/Dokumente/API_FP.CPI.TOTL.ZG_DS2_en_csv_v2_4701153/API_FP.CPI.TOTL.ZG_DS2_en_csv_v2_4701153.csv",
na = c("NA", ""), skip = 4, header = TRUE)
# Delete columns that we do not need to make the data clearer:
inflation[,5:59] <- NULL
inflation[,10:12] <- NULL
# Rename the year columns so they later match with our variable "year" in "happy":
names(inflation)[names(inflation) == "X2015"] <- "2015"
names(inflation)[names(inflation) == "X2016"] <- "2016"
names(inflation)[names(inflation) == "X2017"] <- "2017"
names(inflation)[names(inflation) == "X2018"] <- "2018"
names(inflation)[names(inflation) == "X2019"] <- "2019"
# Again we can delete some columns that the do not need for the later exercises:
inflation[, 2:4] <- NULL
# Transform the data into tidy format with the long format:
# I drop the NA-values because they will bring no benefits for the upcoming
# estimations.
inflation_tidy <- inflation %>% pivot_longer("2015":"2019", names_to = "Year",
values_to = "Inflation, consumer prices (annual %)",
values_drop_na = TRUE)
# Rename the column "Country.Name" into "Country" to make the merge smoother:
names(inflation_tidy)[names(inflation_tidy) == "Country.Name"] <- "Country"
# 4. ###########################################################################
happy_inflation <- inner_join(happy, inflation_tidy, by = c("Country" = "Country",
"Year" = "Year"))
# 5. ###########################################################################
# First we check how many unique countries are contained in each of the two data
# sets "happy" and "inflation_tidy"
length(unique(happy$Country))
length(unique(inflation_tidy$Country))
# We can see that the data set "inflation_tidy" contains more unique countries.
# We can not expect that the inner_join of these two has more than
# 170 countries since "happy" only contains 170 unique countries.
# When we look at the which unique countries are contained in both data sets,
# then we can see how many unique countries should end up in the inner merge
# of these two data sets.
sum(unique(happy$Country) %in% unique(inflation_tidy$Country))
# We have 134 matches from the happy data with the inflation_tidy data.
# This number should be similar with the number of unique countries in our
# merged data "happy_inflation".
length(unique(happy_inflation$Country))
# This is the case!
# 98 countries have been dropped due to the merging process.
# 6. ###########################################################################
# We estimate a simple linear model, in our case inflation rate is the regression
# variable and happiness is the variable that we want to estimate.
reg_ex_6 <- lm(Happiness.Score ~ `Inflation, consumer prices (annual %)`,
data = happy_inflation)
summary(reg_ex_6)
# We see in the regression that inflation has a significant influence on the
# happiness of people.
# You can see the significance of this effect at the t-value, its sum is bigger
# than the typical threshold of |1.96|. This means that inflation has a statistical
# significant effect on happiness.
# When the inflation rate increases by one unit (here in percent point), then you
# can see a decrease in happiness by 0.0108 units. This is just a small effect,
# but the effect is still statistically significant.
# The effect of inflation on happiness is statistically significant but inflation
# has only a small effect on the happiness of the people, this explains why the
# R^2 is so small. Only 3.4% percent of the variation in happiness can be explained
# by inflation.
# This is a sign that there are other factors, which are not in the model which
# determine the happiness of the people.
happy_inflation_2019 <- select(filter(happy_inflation, Year == 2019),
c(Year, Country, `Inflation, consumer prices (annual %)`,
Happiness.Score))
# When we only look at the data from 2019 we can see that certain countries fulfill
# the economic explanation that a lower inflation leads to a higher happiness score.
# The countries Denmark and Botswana are prime examples for this, Denmark has a
# low inflation rate and is one of the happiest countries in the world, while
# Botswana has a high inflation rate and one of the lowest happiness score of all
# countries.
happy_inflation_2019[2, ]
happy_inflation_2019[120, ]
# When you remember that our regression model explains only 3.4% percent of the
# variation in happiness, you can easily find examples where one country has a
# higher inflation rate and a higher happiness score.
happy_inflation_2019[31, ]
happy_inflation_2019[126, ]
# Uruguay has a much higher inflation than South Sudan but it still has also a much
# higher happiness score. This leads to the conclusion that there are other economic
# factors that significantly influence the happiness of people in a country.
# Higher inflation has a decreasing effect for the happiness of the citizen of a
# country, but it is only one small factor which determines the happiness.
# 7. ###########################################################################
# We have seen that our regression model from exercise six only explains a small
# fraction of our model.
# One reason why this might be the case lies in the fact that we our data sets is
# a panel data set, which contains different countries over different time periods
# With a fixed effects model it is possible to prevent the bias of the estimated
# parameters of the regression model. For this purpose, it is useful to realize
# that variables can be divided into two groups. On the one hand, there are variables
# that change over time and variables that remain constant over time, hereafter
# referred to as time-invariant variables. These time-invariant variables have an
# influence on the dependent variable regardless of whether this factor can be observed
# or not. In the fixed effects method, the goal is to overcome the time-invariant
# influences on the dependent variable.
# We can solve the endogeneity problem, which arises from the time-invariant unobserved
# effects with dummy variables. In our case we could use the different countries as
# dummy variables, the different years as dummy variables or both together as dummy
# variables.
#All approaches might lead to a good regression model, but in this case I choose
# only countries as dummy variables.
# I suppose the difference in happiness is explained more by what country you live
# in than by what year you live in (since we are only looking at a short period of time).
# I believe that happiness is more influenced by whether a person lives in Switzerland
# or Haiti, rather than whether they live in Switzerland in 2015 or 2016.
#That is why I use countries as dummy variables, which have to be factors.
reg_ex_7 <- lm(Happiness.Score ~ `Inflation, consumer prices (annual %)` + as.factor(Country),
data = happy_inflation)
summary(reg_ex_7)
# (I have not used the feols function because for some reason it displayed the
# summary in a strange format)
# In our fixed_effects model, we can see that inflation has no longer a statistically
# significant effect on the happiness score of a country, but most of the country
# dummy variables have a significant effect on the happiness of their citizen.
# Our new model can explain 96% percent of the variation in the happiness score,
# this is a much better value compared to our initial regression in exercise 6.
# 8. ###########################################################################
# I add a new column to the happy_inflation data log(Inflation + 0.01), for this
# I will dd 0.01 and at the end I will take the log().
# Since some inflation values are still negative we will lose some observation,
# since you can not take the log() of a negative value.
View(happy_inflation)
View(happy_inflation)
# Create the new column log_inflation
log_inflation <- happy_inflation$`Inflation, consumer prices (annual %)` + 0.01
log_inflation <- log(log_inflation)
happy_inflation$log_inflation <- log_inflation
View(happy_inflation_2019)
View(happy_inflation_2019)
View(happy_2019)
View(happy_2019)
View(happy_inflation)
View(happy_inflation)
View(happy_inflation)
View(happy_inflation)
?ggplot
# Create the scatter plot
ex8_plot <- ggplot(happy_inflation, aes(x = log_inflation, y = Happiness.Score)) +
geom_point()
ex8_plot
# Create the scatter plot
ex8_plot <- ggplot(happy_inflation, aes(x = log_inflation, y = Happiness.Score,
color = as.factor(Region))) + geom_point()
ex8_plot
?lm
reg_ex_9 <- lm(Happines.Score ~ log_inflation, data = happy_inflation)
reg_ex_9 <- lm(Happiness.Score ~ log_inflation, data = happy_inflation)
re_ex_9
reg_ex_9
?geom_smooth
ex9_plot <- ggplot(happy_inflation, aes(x = log_inflation, y = Happiness.Score)) +
geom_point() + geom_smooth(method = "lm", color = "red")
ex9_plot
?geom_smooth
reg_ex_9 <- lm(Happiness.Score ~ log_inflation, data = happy_inflation)
ex9_plot <- ggplot(happy_inflation, aes(x = log_inflation, y = Happiness.Score)) +
geom_point() + geom_smooth(method = "lm", color = "red", se = FALSE)
ex9_plot
reg_ex_9 <- lm(Happiness.Score ~ log_inflation, data = happy_inflation)
summary(reg_ex_9)
ex9_plot <- ggplot(happy_inflation, aes(x = log_inflation, y = Happiness.Score)) +
geom_point() + geom_smooth(method = "lm", color = "red", se = FALSE)
ex9_plot
# Create the scatter plot
ex8_plot <- ggplot(happy_inflation, aes(x = log_inflation, y = Happiness.Score)) + geom_point()
ex8_plot
corr(happy_inflation$Happiness.Score, happy_inflation$log_inflation)
cor(happy_inflation$Happiness.Score, happy_inflation$log_inflation)
cov(happy_inflation$Happiness.Score, happy_inflation$log_inflation)
cov(happy_inflation$Happiness.Score, happy_inflation$log_inflation)
cov(happy_inflation$Happiness.Score, happy_inflation$log_inflation)
reg_ex_9 <- lm(Happiness.Score ~ log_inflation, data = happy_inflation)
summary(reg_ex_9)
ex9_plot <- ggplot(happy_inflation, aes(x = log_inflation, y = Happiness.Score)) +
geom_point() + geom_smooth(method = "lm", color = "red", se = FALSE)
ex9_plot
ex8b_plot <- ggplot(happy_inflation, aes(x = log_inflation, y = Happiness.Score,
as.factor(Region))) + geom_point()
ex8b_plot
ex8b_plot <- ggplot(happy_inflation, aes(x = log_inflation, y = Happiness.Score,
color = as.factor(Region))) + geom_point()
ex8b_plot
reg_ex_9 <- lm(Happiness.Score ~ log_inflation, data = happy_inflation)
summary(reg_ex_9)
ex9_plot <- ggplot(happy_inflation, aes(x = log_inflation, y = Happiness.Score)) +
geom_point() + geom_smooth(method = "lm", color = "red", se = FALSE)
ex9_plot
ex10_plot <- ggplot(happy_inflation, eas(x = log_inflation, y = Happiness.Score)) +
geom_point() + geom_smooth(method = "lm", color = "red", se = FALSE) +
facet_wrap(vars(Year), nrow = 3)
ex10_plot <- ggplot(happy_inflation, aes(x = log_inflation, y = Happiness.Score)) +
geom_point() + geom_smooth(method = "lm", color = "red", se = FALSE) +
facet_wrap(vars(Year), nrow = 3)
ex10_plot
ex10_plot <- ggplot(happy_inflation, aes(x = log_inflation, y = Happiness.Score)) +
geom_point() + geom_smooth(method = "lm", color = "red", se = FALSE) +
facet_wrap(vars(Year), ncol = 3)
ex10_plot
